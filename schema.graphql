# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Hangboard {
  id: ID!
  name: String
  title: String
  holds(where: HangboardHoldWhereInput! = {}, orderBy: [HangboardHoldOrderByInput!]! = [], take: Int, skip: Int! = 0): [HangboardHold!]
  holdsCount(where: HangboardHoldWhereInput! = {}): Int
}

input HangboardWhereUniqueInput {
  id: ID
}

input HangboardWhereInput {
  AND: [HangboardWhereInput!]
  OR: [HangboardWhereInput!]
  NOT: [HangboardWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  holds: HangboardHoldManyRelationFilter
}

input HangboardHoldManyRelationFilter {
  every: HangboardHoldWhereInput
  some: HangboardHoldWhereInput
  none: HangboardHoldWhereInput
}

input HangboardOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
}

input HangboardUpdateInput {
  name: String
  title: String
  holds: HangboardHoldRelateToManyForUpdateInput
}

input HangboardHoldRelateToManyForUpdateInput {
  disconnect: [HangboardHoldWhereUniqueInput!]
  set: [HangboardHoldWhereUniqueInput!]
  create: [HangboardHoldCreateInput!]
  connect: [HangboardHoldWhereUniqueInput!]
}

input HangboardUpdateArgs {
  where: HangboardWhereUniqueInput!
  data: HangboardUpdateInput!
}

input HangboardCreateInput {
  name: String
  title: String
  holds: HangboardHoldRelateToManyForCreateInput
}

input HangboardHoldRelateToManyForCreateInput {
  create: [HangboardHoldCreateInput!]
  connect: [HangboardHoldWhereUniqueInput!]
}

type HangboardHold {
  id: ID!
  name: String
  title: String
  hangboard: Hangboard
}

input HangboardHoldWhereUniqueInput {
  id: ID
}

input HangboardHoldWhereInput {
  AND: [HangboardHoldWhereInput!]
  OR: [HangboardHoldWhereInput!]
  NOT: [HangboardHoldWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  hangboard: HangboardWhereInput
}

input HangboardHoldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
}

input HangboardHoldUpdateInput {
  name: String
  title: String
  hangboard: HangboardRelateToOneForUpdateInput
}

input HangboardRelateToOneForUpdateInput {
  create: HangboardCreateInput
  connect: HangboardWhereUniqueInput
  disconnect: Boolean
}

input HangboardHoldUpdateArgs {
  where: HangboardHoldWhereUniqueInput!
  data: HangboardHoldUpdateInput!
}

input HangboardHoldCreateInput {
  name: String
  title: String
  hangboard: HangboardRelateToOneForCreateInput
}

input HangboardRelateToOneForCreateInput {
  create: HangboardCreateInput
  connect: HangboardWhereUniqueInput
}

type FingerPosition {
  id: ID!
  name: String
  title: String
}

input FingerPositionWhereUniqueInput {
  id: ID
}

input FingerPositionWhereInput {
  AND: [FingerPositionWhereInput!]
  OR: [FingerPositionWhereInput!]
  NOT: [FingerPositionWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
}

input FingerPositionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
}

input FingerPositionUpdateInput {
  name: String
  title: String
}

input FingerPositionUpdateArgs {
  where: FingerPositionWhereUniqueInput!
  data: FingerPositionUpdateInput!
}

input FingerPositionCreateInput {
  name: String
  title: String
}

type ExercisePosition {
  id: ID!
  leftHold: HangboardHold
  leftHoldHangboard: Hangboard
  leftFingerPosition: FingerPosition
  rightHold: HangboardHold
  rightHoldHangboard: Hangboard
  rightFingerPosition: FingerPosition
  action: String
}

input ExercisePositionWhereUniqueInput {
  id: ID
}

input ExercisePositionWhereInput {
  AND: [ExercisePositionWhereInput!]
  OR: [ExercisePositionWhereInput!]
  NOT: [ExercisePositionWhereInput!]
  id: IDFilter
  leftHold: HangboardHoldWhereInput
  leftHoldHangboard: HangboardWhereInput
  leftFingerPosition: FingerPositionWhereInput
  rightHold: HangboardHoldWhereInput
  rightHoldHangboard: HangboardWhereInput
  rightFingerPosition: FingerPositionWhereInput
  action: StringFilter
}

input ExercisePositionOrderByInput {
  id: OrderDirection
  action: OrderDirection
}

input ExercisePositionUpdateInput {
  leftHold: HangboardHoldRelateToOneForUpdateInput
  leftHoldHangboard: HangboardRelateToOneForUpdateInput
  leftFingerPosition: FingerPositionRelateToOneForUpdateInput
  rightHold: HangboardHoldRelateToOneForUpdateInput
  rightHoldHangboard: HangboardRelateToOneForUpdateInput
  rightFingerPosition: FingerPositionRelateToOneForUpdateInput
  action: String
}

input HangboardHoldRelateToOneForUpdateInput {
  create: HangboardHoldCreateInput
  connect: HangboardHoldWhereUniqueInput
  disconnect: Boolean
}

input FingerPositionRelateToOneForUpdateInput {
  create: FingerPositionCreateInput
  connect: FingerPositionWhereUniqueInput
  disconnect: Boolean
}

input ExercisePositionUpdateArgs {
  where: ExercisePositionWhereUniqueInput!
  data: ExercisePositionUpdateInput!
}

input ExercisePositionCreateInput {
  leftHold: HangboardHoldRelateToOneForCreateInput
  leftHoldHangboard: HangboardRelateToOneForCreateInput
  leftFingerPosition: FingerPositionRelateToOneForCreateInput
  rightHold: HangboardHoldRelateToOneForCreateInput
  rightHoldHangboard: HangboardRelateToOneForCreateInput
  rightFingerPosition: FingerPositionRelateToOneForCreateInput
  action: String
}

input HangboardHoldRelateToOneForCreateInput {
  create: HangboardHoldCreateInput
  connect: HangboardHoldWhereUniqueInput
}

input FingerPositionRelateToOneForCreateInput {
  create: FingerPositionCreateInput
  connect: FingerPositionWhereUniqueInput
}

type Interval {
  id: ID!
  exercisePosition: ExercisePosition
  workInterval: Int
  restInterval: Int
}

input IntervalWhereUniqueInput {
  id: ID
}

input IntervalWhereInput {
  AND: [IntervalWhereInput!]
  OR: [IntervalWhereInput!]
  NOT: [IntervalWhereInput!]
  id: IDFilter
  exercisePosition: ExercisePositionWhereInput
  workInterval: IntNullableFilter
  restInterval: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input IntervalOrderByInput {
  id: OrderDirection
  workInterval: OrderDirection
  restInterval: OrderDirection
}

input IntervalUpdateInput {
  exercisePosition: ExercisePositionRelateToOneForUpdateInput
  workInterval: Int
  restInterval: Int
}

input ExercisePositionRelateToOneForUpdateInput {
  create: ExercisePositionCreateInput
  connect: ExercisePositionWhereUniqueInput
  disconnect: Boolean
}

input IntervalUpdateArgs {
  where: IntervalWhereUniqueInput!
  data: IntervalUpdateInput!
}

input IntervalCreateInput {
  exercisePosition: ExercisePositionRelateToOneForCreateInput
  workInterval: Int
  restInterval: Int
}

input ExercisePositionRelateToOneForCreateInput {
  create: ExercisePositionCreateInput
  connect: ExercisePositionWhereUniqueInput
}

type Workout {
  id: ID!
  user: User
  exercises(where: IntervalWhereInput! = {}, orderBy: [IntervalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Interval!]
  exercisesCount(where: IntervalWhereInput! = {}): Int
  date: DateTime
}

input WorkoutWhereUniqueInput {
  id: ID
}

input WorkoutWhereInput {
  AND: [WorkoutWhereInput!]
  OR: [WorkoutWhereInput!]
  NOT: [WorkoutWhereInput!]
  id: IDFilter
  user: UserWhereInput
  exercises: IntervalManyRelationFilter
  date: DateTimeNullableFilter
}

input IntervalManyRelationFilter {
  every: IntervalWhereInput
  some: IntervalWhereInput
  none: IntervalWhereInput
}

input WorkoutOrderByInput {
  id: OrderDirection
  date: OrderDirection
}

input WorkoutUpdateInput {
  user: UserRelateToOneForUpdateInput
  exercises: IntervalRelateToManyForUpdateInput
  date: DateTime
}

input IntervalRelateToManyForUpdateInput {
  disconnect: [IntervalWhereUniqueInput!]
  set: [IntervalWhereUniqueInput!]
  create: [IntervalCreateInput!]
  connect: [IntervalWhereUniqueInput!]
}

input WorkoutUpdateArgs {
  where: WorkoutWhereUniqueInput!
  data: WorkoutUpdateInput!
}

input WorkoutCreateInput {
  user: UserRelateToOneForCreateInput
  exercises: IntervalRelateToManyForCreateInput
  date: DateTime
}

input IntervalRelateToManyForCreateInput {
  create: [IntervalCreateInput!]
  connect: [IntervalWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createHangboard(data: HangboardCreateInput!): Hangboard
  createHangboards(data: [HangboardCreateInput!]!): [Hangboard]
  updateHangboard(where: HangboardWhereUniqueInput!, data: HangboardUpdateInput!): Hangboard
  updateHangboards(data: [HangboardUpdateArgs!]!): [Hangboard]
  deleteHangboard(where: HangboardWhereUniqueInput!): Hangboard
  deleteHangboards(where: [HangboardWhereUniqueInput!]!): [Hangboard]
  createHangboardHold(data: HangboardHoldCreateInput!): HangboardHold
  createHangboardHolds(data: [HangboardHoldCreateInput!]!): [HangboardHold]
  updateHangboardHold(where: HangboardHoldWhereUniqueInput!, data: HangboardHoldUpdateInput!): HangboardHold
  updateHangboardHolds(data: [HangboardHoldUpdateArgs!]!): [HangboardHold]
  deleteHangboardHold(where: HangboardHoldWhereUniqueInput!): HangboardHold
  deleteHangboardHolds(where: [HangboardHoldWhereUniqueInput!]!): [HangboardHold]
  createFingerPosition(data: FingerPositionCreateInput!): FingerPosition
  createFingerPositions(data: [FingerPositionCreateInput!]!): [FingerPosition]
  updateFingerPosition(where: FingerPositionWhereUniqueInput!, data: FingerPositionUpdateInput!): FingerPosition
  updateFingerPositions(data: [FingerPositionUpdateArgs!]!): [FingerPosition]
  deleteFingerPosition(where: FingerPositionWhereUniqueInput!): FingerPosition
  deleteFingerPositions(where: [FingerPositionWhereUniqueInput!]!): [FingerPosition]
  createExercisePosition(data: ExercisePositionCreateInput!): ExercisePosition
  createExercisePositions(data: [ExercisePositionCreateInput!]!): [ExercisePosition]
  updateExercisePosition(where: ExercisePositionWhereUniqueInput!, data: ExercisePositionUpdateInput!): ExercisePosition
  updateExercisePositions(data: [ExercisePositionUpdateArgs!]!): [ExercisePosition]
  deleteExercisePosition(where: ExercisePositionWhereUniqueInput!): ExercisePosition
  deleteExercisePositions(where: [ExercisePositionWhereUniqueInput!]!): [ExercisePosition]
  createInterval(data: IntervalCreateInput!): Interval
  createIntervals(data: [IntervalCreateInput!]!): [Interval]
  updateInterval(where: IntervalWhereUniqueInput!, data: IntervalUpdateInput!): Interval
  updateIntervals(data: [IntervalUpdateArgs!]!): [Interval]
  deleteInterval(where: IntervalWhereUniqueInput!): Interval
  deleteIntervals(where: [IntervalWhereUniqueInput!]!): [Interval]
  createWorkout(data: WorkoutCreateInput!): Workout
  createWorkouts(data: [WorkoutCreateInput!]!): [Workout]
  updateWorkout(where: WorkoutWhereUniqueInput!, data: WorkoutUpdateInput!): Workout
  updateWorkouts(data: [WorkoutUpdateArgs!]!): [Workout]
  deleteWorkout(where: WorkoutWhereUniqueInput!): Workout
  deleteWorkouts(where: [WorkoutWhereUniqueInput!]!): [Workout]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  hangboards(where: HangboardWhereInput! = {}, orderBy: [HangboardOrderByInput!]! = [], take: Int, skip: Int! = 0): [Hangboard!]
  hangboard(where: HangboardWhereUniqueInput!): Hangboard
  hangboardsCount(where: HangboardWhereInput! = {}): Int
  hangboardHolds(where: HangboardHoldWhereInput! = {}, orderBy: [HangboardHoldOrderByInput!]! = [], take: Int, skip: Int! = 0): [HangboardHold!]
  hangboardHold(where: HangboardHoldWhereUniqueInput!): HangboardHold
  hangboardHoldsCount(where: HangboardHoldWhereInput! = {}): Int
  fingerPositions(where: FingerPositionWhereInput! = {}, orderBy: [FingerPositionOrderByInput!]! = [], take: Int, skip: Int! = 0): [FingerPosition!]
  fingerPosition(where: FingerPositionWhereUniqueInput!): FingerPosition
  fingerPositionsCount(where: FingerPositionWhereInput! = {}): Int
  exercisePositions(where: ExercisePositionWhereInput! = {}, orderBy: [ExercisePositionOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExercisePosition!]
  exercisePosition(where: ExercisePositionWhereUniqueInput!): ExercisePosition
  exercisePositionsCount(where: ExercisePositionWhereInput! = {}): Int
  intervals(where: IntervalWhereInput! = {}, orderBy: [IntervalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Interval!]
  interval(where: IntervalWhereUniqueInput!): Interval
  intervalsCount(where: IntervalWhereInput! = {}): Int
  workouts(where: WorkoutWhereInput! = {}, orderBy: [WorkoutOrderByInput!]! = [], take: Int, skip: Int! = 0): [Workout!]
  workout(where: WorkoutWhereUniqueInput!): Workout
  workoutsCount(where: WorkoutWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
