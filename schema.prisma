// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                String    @id @default(cuid())
  name              String    @default("")
  email             String    @unique @default("")
  password          String
  posts             Post[]    @relation("Post_author")
  createdAt         DateTime? @default(now())
  from_Workout_user Workout[] @relation("Workout_user")
}

model Post {
  id       String  @id @default(cuid())
  title    String  @default("")
  content  String  @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author   User?   @relation("Post_author", fields: [authorId], references: [id])
  authorId String? @map("author")
  tags     Tag[]   @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Hangboard {
  id                                       String             @id @default(cuid())
  name                                     String             @default("")
  title                                    String             @default("")
  holds                                    HangboardHold[]    @relation("HangboardHold_hangboard")
  from_ExercisePosition_leftHoldHangboard  ExercisePosition[] @relation("ExercisePosition_leftHoldHangboard")
  from_ExercisePosition_rightHoldHangboard ExercisePosition[] @relation("ExercisePosition_rightHoldHangboard")
}

model HangboardHold {
  id                              String             @id @default(cuid())
  name                            String             @default("")
  title                           String             @default("")
  hangboard                       Hangboard?         @relation("HangboardHold_hangboard", fields: [hangboardId], references: [id])
  hangboardId                     String?            @map("hangboard")
  from_ExercisePosition_leftHold  ExercisePosition[] @relation("ExercisePosition_leftHold")
  from_ExercisePosition_rightHold ExercisePosition[] @relation("ExercisePosition_rightHold")

  @@index([hangboardId])
}

model FingerPosition {
  id                                        String             @id @default(cuid())
  name                                      String             @default("")
  title                                     String             @default("")
  from_ExercisePosition_leftFingerPosition  ExercisePosition[] @relation("ExercisePosition_leftFingerPosition")
  from_ExercisePosition_rightFingerPosition ExercisePosition[] @relation("ExercisePosition_rightFingerPosition")
}

model ExercisePosition {
  id                             String          @id @default(cuid())
  leftHold                       HangboardHold?  @relation("ExercisePosition_leftHold", fields: [leftHoldId], references: [id])
  leftHoldId                     String?         @map("leftHold")
  leftHoldHangboard              Hangboard?      @relation("ExercisePosition_leftHoldHangboard", fields: [leftHoldHangboardId], references: [id])
  leftHoldHangboardId            String?         @map("leftHoldHangboard")
  leftFingerPosition             FingerPosition? @relation("ExercisePosition_leftFingerPosition", fields: [leftFingerPositionId], references: [id])
  leftFingerPositionId           String?         @map("leftFingerPosition")
  rightHold                      HangboardHold?  @relation("ExercisePosition_rightHold", fields: [rightHoldId], references: [id])
  rightHoldId                    String?         @map("rightHold")
  rightHoldHangboard             Hangboard?      @relation("ExercisePosition_rightHoldHangboard", fields: [rightHoldHangboardId], references: [id])
  rightHoldHangboardId           String?         @map("rightHoldHangboard")
  rightFingerPosition            FingerPosition? @relation("ExercisePosition_rightFingerPosition", fields: [rightFingerPositionId], references: [id])
  rightFingerPositionId          String?         @map("rightFingerPosition")
  action                         String          @default("")
  from_Interval_exercisePosition Interval[]      @relation("Interval_exercisePosition")

  @@index([leftHoldId])
  @@index([leftHoldHangboardId])
  @@index([leftFingerPositionId])
  @@index([rightHoldId])
  @@index([rightHoldHangboardId])
  @@index([rightFingerPositionId])
}

model Interval {
  id                     String            @id @default(cuid())
  exercisePosition       ExercisePosition? @relation("Interval_exercisePosition", fields: [exercisePositionId], references: [id])
  exercisePositionId     String?           @map("exercisePosition")
  workInterval           Int?
  restInterval           Int?
  from_Workout_exercises Workout[]         @relation("Workout_exercises")

  @@index([exercisePositionId])
}

model Workout {
  id        String     @id @default(cuid())
  user      User?      @relation("Workout_user", fields: [userId], references: [id])
  userId    String?    @map("user")
  exercises Interval[] @relation("Workout_exercises")
  date      DateTime?

  @@index([userId])
}
